name: Associate Milestone and List Issues on Release

on:
  release:
    types: [published]

permissions:
  contents: write  # 确保可以更新 Release 和推送代码
  issues: write    # 确保可以操作 Issues 和 Milestones
  pages: write     # 确保可以部署到 GitHub Pages
  id-token: write  # 确保可以验证 GitHub Pages 部署

jobs:
  associate-milestone-and-list-issues:
    runs-on: ubuntu-latest

    steps:
      # 检出代码
      - name: Checkout repository
        uses: actions/checkout@v4

      # 调试：打印 Release 信息
      - name: Debug release info
        run: |
          echo "Release Tag: ${{ github.event.release.tag_name }}"
          echo "Is Pre-release: ${{ github.event.release.prerelease }}"

      # 查找 Milestone 并列出 Issues
      - name: Find matching milestone and list issues
        uses: actions/github-script@v6
        id: find-milestone
        with:
          script: |
            const tagName = context.payload.release.tag_name;
            const version = tagName.replace(/^v/, '');
            console.log(`Looking for milestone with title: ${version}`);
            
            let milestone;
            try {
              const milestones = await github.rest.issues.listMilestones({
                owner: context.repo.owner,
                repo: context.repo.repo,
              });
              milestone = milestones.data.find(m => 
                m.title === version || // 匹配 1.0.0
                m.title === `v${version}` || // 匹配 v1.0.0
                m.title === `Release ${version}` // 匹配 Release 1.0.0
              );
              if (!milestone) {
                console.log(`No matching milestone found for version ${version}, creating one...`);
                const newMilestone = await github.rest.issues.createMilestone({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: version,
                  state: 'open',
                  description: `Milestone for release ${tagName}`,
                });
                milestone = newMilestone.data;
              }
              console.log(`Found milestone: ${milestone.title} (number: ${milestone.number})`);
            } catch (error) {
              core.setFailed(`Failed to list or create milestones: ${error.message}`);
              return;
            }

            let issuesList;
            try {
              const issues = await github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                milestone: milestone.number,
                state: 'all',
              });
              issuesList = issues.data
                .map(issue => {
                  const cleanTitle = issue.title
                    .replace(/;/g, '') // 移除分号
                    .replace(/\n/g, ' ') // 替换换行符为空格
                    .replace(/"/g, '\\"'); // 转义双引号
                  return `- [#${issue.number}](${issue.html_url}) ${cleanTitle}`;
                })
                .sort()
                .join('\n') || 'No issues found in this milestone.';
              console.log(`Issues in milestone:\n${issuesList}`);
            } catch (error) {
              core.setFailed(`Failed to list issues: ${error.message}`);
              return;
            }

            // 设置输出
            core.setOutput('milestone_number', milestone.number.toString());
            core.setOutput('milestone_url', milestone.html_url);
            core.setOutput('issues_list', issuesList);

      # 调试：打印 Milestone 和 Issues 信息
      - name: Debug milestone and issues
        run: |
          echo "Milestone Number: ${{ steps.find-milestone.outputs.milestone_number }}"
          echo "Milestone URL: ${{ steps.find-milestone.outputs.milestone_url }}"
          echo "Issues List: ${{ steps.find-milestone.outputs.issues_list }}"

      # 更新 Release 描述，添加 Milestone 链接和 Issues 列表
      - name: Update release body with milestone and issues
        if: steps.find-milestone.outputs.milestone_number != ''
        uses: actions/github-script@v6
        with:
          script: |
            const releaseId = context.payload.release.id;
            const currentBody = context.payload.release.body || '';
            const milestoneUrl = '${{ steps.find-milestone.outputs.milestone_url }}';
            const issuesList = `${{ steps.find-milestone.outputs.issues_list }}`;

            let newBody = currentBody;
            if (milestoneUrl) {
              newBody += `\n\n## Associated Milestone\n[Milestone](${milestoneUrl})`;
            } else {
              newBody += `\n\n## Associated Milestone\nNo milestone found.`;
            }
            if (issuesList) {
              newBody += `\n\n## Issues in Milestone\n${issuesList}`;
            } else {
              newBody += `\n\n## Issues in Milestone\nNo issues found.`;
            }

            try {
              await github.rest.repos.updateRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: releaseId,
                body: newBody,
              });
              console.log('Successfully updated release body');
            } catch (error) {
              core.setFailed(`Failed to update release body: ${error.message}`);
            }

      # 关闭 Milestone（仅在正式 Release 时）
      - name: Close milestone
        if: steps.find-milestone.outputs.milestone_number != '' && github.event.release.prerelease == false
        uses: actions/github-script@v6
        with:
          script: |
            const milestoneNumber = parseInt('${{ steps.find-milestone.outputs.milestone_number }}', 10);
            try {
              await github.rest.issues.updateMilestone({
                owner: context.repo.owner,
                repo: context.repo.repo,
                milestone_number: milestoneNumber,
                state: 'closed',
              });
              console.log(`Successfully closed milestone ${milestoneNumber}`);
            } catch (error) {
              core.setFailed(`Failed to close milestone: ${error.message}`);
            }

      # 下载现有的 issues.json 文件（如果存在）
      - name: Download existing issues.json
        if: steps.find-milestone.outputs.issues_data != '' && github.event.release.prerelease == false
        run: |
            mkdir -p pages
            curl -L -o pages/issues.json "https://phiptech.github.io/construction-project/issues.json" || echo "[]" > pages/issues.json
            cat pages/issues.json

    # 追加新 Issues 数据并生成新的 issues.json 文件
      - name: Append new issues to issues.json
        if: steps.find-milestone.outputs.issues_data != '' && github.event.release.prerelease == false
        run: |
            # 读取现有 issues.json 文件
            existing_data=$(cat pages/issues.json)
            
            # 验证 existing_data 是否为有效的 JSON 数组，如果不是则初始化为空数组
            if ! echo "$existing_data" | jq -e '. | arrays' >/dev/null; then
                echo "Existing data is not a valid JSON array, initializing as empty array"
                existing_data="[]"
            fi
            
            # 解析现有数据和新数据
            existing_array=$(echo "$existing_data" | jq '.')
            new_data='${{ steps.find-milestone.outputs.issues_data }}'
            
            # 合并数据
            updated_data=$(echo "$existing_array" | jq --argjson new "$new_data" '. += $new')
            
            # 保存更新后的数据到 issues.json
            echo "$updated_data" > pages/issues.json
            cat pages/issues.json

        # 上传 Artifact
      - name: Upload artifact
        if: steps.find-milestone.outputs.issues_data != '' && github.event.release.prerelease == false
        uses: actions/upload-pages-artifact@v3
        with:
            path: 'pages'

  # 部署到 GitHub Pages
  deploy-pages:
    needs: associate-milestone-and-list-issues
    if: github.event.release.prerelease == false
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4